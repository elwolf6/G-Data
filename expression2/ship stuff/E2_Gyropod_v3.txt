@name E2 Gyropod v3
@inputs Target:vector LAT
@persist [AngVel AngMult]:angle AccelerationMult:vector SpeedLimit Massmem Acceleration Speed Strafeud Strafelr Deadzone RollYaw FreeLookIsLookAt
@persist [Engines Enabled PodControler]:table [Base Chair Driver]:entity Constraints:array Active InChair WaitingForActivate AllowEngines [EngineSound EngineSound2 ActivateKey]:string
@persist Lvec:vector Ops

if(dupefinished()){reset()}
elseif(first()){
    #Set Your Multipliers Or You Are Dumb.
    #This is in FIGHTER FLIGHT mode right now, if you try to fly a capital
    #you will spaz out and explode.
    #AngMult(Pitch, Yaw, Roll)
    AngMult = ang(6,6,6)
    #Controls the acceleration multipliers. Defaults to vec(1,0.2,0.2)
    #AccelerationMult(Forward, Right, Up)
    AccelerationMult = vec(1, 1, 1)
    #Should the Free Look key act as a Look At button? Defaults to 0
    FreeLookIsLookAt = 0
    #This is your maximum speed, don't set it any higher than 3500 unless you know what you're doing.
    SpeedLimit = 3500
    #This controls how fast you accelerate and decelerate, only set it to numbers between 1 and 0.
    Acceleration = 0.025
    #This controls the minimum amount of aiming you need to do to turn. Defaults to 2.5.
    Deadzone = 2.5
    #Should we use roll instead of yaw by default?
    RollYaw = 1
    #What key makes the vehicle turn on? Defaults to spacebar
    ActivateKey = "Space"
    #Should we allow the e2 to try and turn on engine effects? Defaults to 1, can cause the e2 to break
    AllowEngines = 0
    #What sound should we use for our engines? Defaults to "ambient/atmosphere/underground_hall_loop1.wav"
    EngineSound = "ambient/atmosphere/underground_hall_loop1.wav"
    EngineSound2 = "Shipsplosion/sc_slowdown_loud.mp3"
    
    entity():combatImmune(1)
    
    ###############
    #END OF CONFIG#
    ###############
    function void dokeys(){
        if(Chair:isValid()){
            Driver = Chair:driver()
            
            if(Driver:isValid()){
                PodControler["W", number] = Driver:keyForward()
                PodControler["A", number] = Driver:keyLeft()
                PodControler["S", number] = Driver:keyBack()
                PodControler["D", number] = Driver:keyRight()
                PodControler["R", number] = Driver:keyReload()
                PodControler["Zoom", number] = Driver:keyZoom()
                PodControler["M1", number] = Driver:keyAttack1()
                PodControler["M2", number] = Driver:keyAttack2()
                PodControler["Space", number] = Driver:keyJump()
                PodControler["Shift", number] = Driver:keySprint()
                PodControler["Alt", number] = Driver:keyWalk()
                PodControler["Ctrl", number] = Driver:keyDuck()
                PodControler["Next Weapon", number] = Driver:keyWeapon1()
                PodControler["Previous Weapon", number] = Driver:keyWeapon2()
                PodControler["Active", number] = 1
                PodControler["Chair", entity] = Chair
            }
        }else{
            PodControler["W", number] = 0
            PodControler["A", number] = 0
            PodControler["S", number] = 0
            PodControler["D", number] = 0
            PodControler["R", number] = 0
            PodControler["Zoom", number] = 0
            PodControler["M1", number] = 0
            PodControler["M2", number] = 0
            PodControler["Space", number] = 0
            PodControler["Shift", number] = 0
            PodControler["Alt", number] = 0
            PodControler["Ctrl", number] = 0
            PodControler["Next Weapon", number] = 0
            PodControler["Previous Weapon", number] = 0
            PodControler["Active", number] = 0
            PodControler["Chair", entity] = Chair
        }
    }
    
    function void enableEngines(){
        if (AllowEngines)
        {
            local Constraints = entity():getConstraints()
            local CurLight = table()
            local CurTable = table()
            local ID = 0
            
            foreach(I, Ent:entity=Constraints){
                foreach(K, CurEngine:table=Engines){
                    if(Ent:model():find(CurEngine["model", string]) != 0){
                        CurTable = CurEngine["lights", table]
                        for(C=1, CurEngine["lights", table]:count()){
                            CurLight = CurTable[C, table]
                            ID = Enabled:count()+1
                            
                            Enabled[ID, number] = 1
                            
                            lightCreate(ID)
                            lightPos(ID,Ent:toWorld(CurLight["pos", vector]))
                            lightBrightness(ID, CurLight["brightness", number])
                            lightDistance(ID, CurLight["distance", number])
                            lightColor(ID,CurLight["color", vector])
                            lightParent(ID,Ent)
                            
                            holoCreate(ID, Ent:toWorld(CurLight["pos", vector]), vec(1,1,1)*0.01)
                            holoParent(ID, Ent)
                            holoMaterial(ID, "sprites/muzzleflash4")
                            holoEntity(ID):setTrails(CurLight["distance", number]/10,0,CurLight["distance", number]/500,"trails/laser",CurLight["color", vector],255)
                            
                            drawSprite(1000+ID,"sprites/muzzleflash4",Ent:toWorld(CurLight["pos", vector]),CurLight["distance", number]/12,CurLight["distance", number]/12,CurLight["color", vector],255,Ent)
                            
                        }
                    }
                }
            }
        }
    }
    
    function void disableEngines(){
        for(I=1, Enabled:count()){
            lightRemove(I)
            removeSprite(1000+I)
        }
        
        Enabled = table()
    }
    
    function void movement(){
        if(Base:isValid()){
            Forward = PodControler["W", number]
            Backwards = PodControler["S", number]
            Left = PodControler["A", number]
            Right = PodControler["D", number]
            Up = PodControler["Space", number]
            Down = PodControler["Ctrl", number]
            FreeView = !FreeLookIsLookAt ? !PodControler["Alt", number] : 0
            Roll = PodControler["Shift", number]
            Level = PodControler["R", number]
            
            if(Forward == 0&Backwards == 0){
                Speed = Speed*(1-(Acceleration*AccelerationMult:x()))
            }elseif(Backwards >= 1){
                Speed = Speed - (SpeedLimit*AccelerationMult:x()*Acceleration)
            }elseif(Forward >= 1){
                Speed = Speed + (SpeedLimit*AccelerationMult:x()*Acceleration)
            }
            
            if(Up == 0&Down == 0){
                Strafeud = Strafeud*(1-(Acceleration*AccelerationMult:z()))
            }elseif(Down >= 1){
                Strafeud = Strafeud - (SpeedLimit*AccelerationMult:z()*Acceleration)
            }elseif(Up >= 1){  
                Strafeud = Strafeud + (SpeedLimit*AccelerationMult:z()*Acceleration)
            }
            
            if(Right == 0&Left == 0){
                Strafelr = Strafelr*(1-(Acceleration*AccelerationMult:y()))
            }elseif(Left >= 1){
                Strafelr = Strafelr + (SpeedLimit*AccelerationMult:y()*Acceleration)
            }elseif(Right >= 1){  
                Strafelr = Strafelr - (SpeedLimit*AccelerationMult:y()*Acceleration)
            }
            
            Speed = clamp(Speed, -SpeedLimit, SpeedLimit)
            Strafelr = clamp(Strafelr, -SpeedLimit, SpeedLimit)
            Strafeud = clamp(Strafeud, -SpeedLimit, SpeedLimit)
            
            Vvec = vec(Speed, Strafelr, Strafeud):rotate(Base:angles())
            Vel = Base:vel()
            
            if(Vvec != vec(0,0,0)){
                Base:setVel(Vvec)
            }else{
                Base:setVel(Vel * 0.95)
            }
            
            if(Level == 0){
                if((RollYaw ? !Roll : Roll) == 1){
                    Angles = FreeView ? ang(-clamp((abs(Base:elevation(Lvec)) > Deadzone ? Base:elevation(Lvec) : 0), -90, 90), 0, clamp((abs(Base:bearing(Lvec)) > Deadzone ? Base:bearing(Lvec) : 0), -45, 45)) : ang()
                }else{
                    Angles = FreeView ? ang(-clamp((abs(Base:elevation(Lvec)) > Deadzone ? Base:elevation(Lvec) : 0), -90, 90), -clamp((abs(Base:bearing(Lvec)) > Deadzone ? Base:bearing(Lvec) : 0), -90, 90), -angnorm(Base:angles()):roll()) : ang()
                }
            } elseif (Level >= 1) {
                Angles = ang(-Base:angles():pitch(), FreeView ? -clamp((abs(Base:bearing(Lvec)) > Deadzone ? Base:bearing(Lvec) : 0), -90, 90) : 0, -angnorm(Base:angles():roll()))
            }
        
            Base:setAngVel(shiftR((Angles*AngMult) - Base:angVel()))
            Chair:driver():setPos(Chair:pos())
        }
        
        if(Active){timer(20, 1, "MOVEMENT", "movement()")}
    }
    
    function void view(){
        dokeys()
        
        if (!FreeLookIsLookAt | PodControler["Alt", number]) {
            if (LAT == 0)
            {
                rangerHitEntities(0)
                Ranger = rangerOffset(216384, Base:boxCenterW(), Chair:driver():eye())
                Lvec=Ranger:pos()
            }
            else
            {
                Lvec = Target
            }
        }
        
        soundPitch(1,clamp((Base:vel():length() / (SpeedLimit * 1.25)) * 255, 50, 255))
        soundPitch(2,clamp((Base:vel():length() / (SpeedLimit * 1.25)) * 225, 25, 225))
        soundPitch(3,60)
        
        if(Active){timer(50, 1, "VIEW", "view()")}
    }
    
    function void activeCheck(){
        if(!Base:isValid() & entity():parent():isValid()) {
            Base = entity():parent()
            Hvec=Base:pos()
            Lvec=Base:toWorld(Base:forward())
        }
        
        if (Base:isValid()) {
            Base:propGravity(0)
            Chair:propGravity(0)
            Ops = ops()
            Driver = Chair:driver()
            InChair = Chair:driver():isValid()
            
            if(changed(InChair)&InChair){
                WaitingForActivate = 1
                Chair:printDriver("Please press '" + ActivateKey + "' to engage the gyropod!")
            }elseif(InChair&WaitingForActivate){
                dokeys()
                
                if(PodControler[ActivateKey, number]){
                    WaitingForActivate = 0
                    Active = 1
                }
            }elseif(!InChair){
                WaitingForActivate = 0
                Active = 0
            }
            
            if(changed(Active)&Active&entity():parent():isValid()){
                enableEngines()
                Base:unFreeze()
                Chair:unFreeze()
                Chair:soundPlay(1, 0, EngineSound)
                Chair:soundPlay(2, 0, EngineSound)
                Chair:soundPlay(3, 0, EngineSound2)
                soundVolume(1, 255)
                soundVolume(2, 255)
                soundVolume(3, 255)
                timer(25, 1, "MOVEMENT", "movement()" )
                timer(50, 1, "VIEW", "view()")
            }elseif(changed(Active)&!Active){
                disableEngines()
                soundStop(1)
                soundStop(2)
                soundStop(3)
                Base:freeze()
                Chair:freeze()
                
                Speed = 0
                Strafeud = 0
                Strafelr = 0
            }
        }
    }
    
    timer(100, 0, "ACTIVE", "activeCheck()")
    Chair = entity():isWeldedTo()
    
    Massmem=50000
    
    foreach(I, K:entity=Base:getConstraints()){
        Massmem += K:mass()
    }
 
    PodControler["W", number] = 0
    PodControler["A", number] = 0
    PodControler["S", number] = 0
    PodControler["D", number] = 0
    PodControler["R", number] = 0
    PodControler["M1", number] = 0
    PodControler["M2", number] = 0
    PodControler["Space", number] = 0
    PodControler["Shift", number] = 0
    PodControler["Alt", number] = 0
    PodControler["Ctrl", number] = 0
    PodControler["Next Weapon", number] = 0
    PodControler["Previous Weapon", number] = 0
    PodControler["Active", number] = 0
    PodControler["Chair", entity] = noentity()
    
    Engines["Engine1", table] = table()
    Engines["Engine1", table]["lights", table] = table()
    Engines["Engine1", table]["lights", table][1, table] = table()
    Engines["Engine1", table]["lights", table][2, table] = table()
    Engines["Engine1", table]["model", string] = "models/spacebuild/emount2_milcock4.mdl"
    Engines["Engine1", table]["lights", table][1, table]["pos", vector] = vec(-196, 0, -23)
    Engines["Engine1", table]["lights", table][1, table]["color", vector] = vec(255,100,0)
    Engines["Engine1", table]["lights", table][1, table]["brightness", number] = 100
    Engines["Engine1", table]["lights", table][1, table]["distance", number] = 1000
    Engines["Engine1", table]["lights", table][2, table]["pos", vector] = vec(-258, 0, 36)
    Engines["Engine1", table]["lights", table][2, table]["color", vector] = vec(255,100,0)
    Engines["Engine1", table]["lights", table][2, table]["brightness", number] = 100
    Engines["Engine1", table]["lights", table][2, table]["distance", number] = 1000
    
    Engines["WingLeft", table] = table()
    Engines["WingLeft", table]["lights", table] = table()
    Engines["WingLeft", table]["lights", table][1, table] = table()
    Engines["WingLeft", table]["lights", table][2, table] = table()
    Engines["WingLeft", table]["model", string] = "models/slyfo/wingsml_jetleft.mdl"
    Engines["WingLeft", table]["lights", table][1, table]["pos", vector] = vec(8.5, -14.5, -9.3)
    Engines["WingLeft", table]["lights", table][1, table]["color", vector] = vec(0,100,255)
    Engines["WingLeft", table]["lights", table][1, table]["brightness", number] = 0.5
    Engines["WingLeft", table]["lights", table][1, table]["distance", number] = 500
    Engines["WingLeft", table]["lights", table][2, table]["pos", vector] = vec(5.96, 15.3, -9.3)
    Engines["WingLeft", table]["lights", table][2, table]["color", vector] = vec(0,100,255)
    Engines["WingLeft", table]["lights", table][2, table]["brightness", number] = 0.5
    Engines["WingLeft", table]["lights", table][2, table]["distance", number] = 500
    
    Engines["WingRight", table] = table()
    Engines["WingRight", table]["lights", table] = table()
    Engines["WingRight", table]["lights", table][1, table] = table()
    Engines["WingRight", table]["lights", table][2, table] = table()
    Engines["WingRight", table]["model", string] = "models/slyfo/wingsml_jetright.mdl"
    Engines["WingRight", table]["lights", table][1, table]["pos", vector] = vec(8.5, 14.5, -10)
    Engines["WingRight", table]["lights", table][1, table]["color", vector] = vec(0,100,255)
    Engines["WingRight", table]["lights", table][1, table]["brightness", number] = 0.5
    Engines["WingRight", table]["lights", table][1, table]["distance", number] = 500
    Engines["WingRight", table]["lights", table][2, table]["pos", vector] = vec(5.96, -15.3, -10)
    Engines["WingRight", table]["lights", table][2, table]["color", vector] = vec(0,100,255)
    Engines["WingRight", table]["lights", table][2, table]["brightness", number] = 0.5
    Engines["WingRight", table]["lights", table][2, table]["distance", number] = 500
    
    Enabled = table()
}

