@name Holo Turret
@inputs Fire Active Target:entity
@persist MaxElevation MinElevation AimSpeed Range Hitscan:ranger
@persist [Weapons WeaponSlots WaitingForParent]:array LastSlot LastParented TElevation OTElevation
@model models/mandrac/energy/cap_beam_base.mdl
runOnChat(1)
runOnLast(1)

interval(Active ? 100 : 1000)

entity():setSubMaterial(2,"spacebuild/body2")
entity():setSubMaterial(1,"sprops/trans/misc/ls_m1")

# Chat Commands
if (chatClk(owner())) {
    # Deparent the guns, good if you want to change your weapons after you put them on.                         #WELD THE E2 LAST
    if(owner():lastSaid():lower() == "!deparent"){
        hideChat(1)
        #Unparent the weapons
        foreach(K, V:wirelink=Weapons){
            E = V:entity()
            if(E:isValid()){
                E:setAlpha(255)
                E:propNotSolid(0)
                E:deparent()
            }
        }
        print("Weapons Detached!")
        
    # Weld the weapons to the core, this makes it so your ship can fire the guns.
    # Don't use this until you've parented your ship, otherwise the guns will parent to the ship instead of the turret!
    }elseif(owner():lastSaid():lower() == "!weld" && entity():getCoreEnt():isValid()){
        hideChat(1)
        foreach(K, E:wirelink=Weapons){
            E:entity():weld(entity():getCoreEnt())
        }
        
    # Attaches the guns to the holograms.
    }elseif(owner():lastSaid():lower() == "!attach"){
        hideChat(1)
        findClearWhiteList()
        findIncludeClass("sc_weapon*")
        findInSphere(entity():pos(), 150)
        
        foreach(K, E:entity=findToArray()){
            SE = WeaponSlots[LastSlot+1, entity]
            LastSlot = LastSlot + 1
            if(LastSlot > WeaponSlots:count()){LastSlot = 0}
            
            if(SE:isValid()){
                E:freeze()
                E:propNotSolid(1)
                E:setMass(1)
                E:setPos(SE:toWorld(vec(0,0,0)))
                E:setAng(SE:toWorld(ang(0,0,0)))
                WaitingForParent[WaitingForParent:count()+1, entity] = E
            }
        }
        
        timer("PARENT", 100)
    }
# End chat commands
    
# Weapon parenting
}elseif (clk("PARENT")){
    local Looped = 0
    for(I=LastParented+1, WaitingForParent:count()){
        E = WaitingForParent[I, entity]
        E:parentTo(holoEntity(11))
        Weapons[Weapons:count()+1, wirelink] = E:wirelink()
        WaitingForParent:removeEntity(I)
        Looped = Looped + 1
        if(Looped == 2){
            timer("PARENT", 100)
            break
        }
    }
# End weapon parenting

# Configuration
}elseif (first()|dupefinished()){
    # Variables
    # How far up can you aim the gun.
    MaxElevation = 75
    
    # How far down can you aim the gun.
    MinElevation = -10
    
    # What is the maximum range that the turret should try to shoot a target from.
    Range = 15000
    
    # How fast does the turret aim, determine the value like this: DegreesPerSecond / 10
    AimSpeed = 5
    
    # If we should automatically clean up guns when we die, this is useful in space fights.
    # But if you're working on your ship, then you probably don't want this. It's annoying.
    AutoClean = 0
    # End Variables
    
    
    # Holograms
    # Basic aiming holograms, don't remove these.
    # This is used to calculate bearing, you should parent holograms that only turn on the yaw axis to this.
    holoCreate(1,entity():toWorld(vec(0,20,40)))
        holoAng(1,entity():toWorld(ang(0,-90,0)))
        holoAlpha(1,0)
        holoParent(1,entity())
        
    # This is the part that faces the target, attach anything that needs to pitch AND yaw to this.    
    holoCreate(11,entity():toWorld(vec(0,20,75)))
        holoAng(11,holoEntity(1):toWorld(ang(0,0,0)))
        holoAlpha(11,0)
        holoScale(11, vec(10,1,1))
        holoParent(11,1)
        WeaponSlots[1, entity] = holoEntity(11)
        
    # This should be the same as hologram 11, it's used to calculate Elevation more accurately.
    holoCreate(111,entity():toWorld(vec(0,20,75)))
        holoAng(111,holoEntity(1):toWorld(ang(0,0,0)))
        holoAlpha(111,0)
        holoParent(111,1)
    # End basic aiming holograms
        
        
    # Visual holograms, these can be changed as much as you want.
   BeamBody = holoCreate(2,entity():toWorld(vec(0,0,0)))
                  holoAng(2,entity():toWorld(ang(0,0,0)))
                  holoModel(2,"models/mandrac/energy/cap_beam_body.mdl")
                  holoParent(2,1)
                  holoScale(2, vec(0.5,0.5,0.5))
                  BeamBody:setSubMaterial(2,"sprops/trans/misc/ls_m1")
                  BeamBody:setSubMaterial(3,"spacebuild/body2")
    
    BeamGun = holoCreate(22,holoEntity(11):toWorld(vec(0,0,0)))
                  holoScale(22, vec(0.5,0.5,0.5))
                  holoPos(22, entity():pos() + vec(0,0,-5) )
                  holoModel(22,"models/mandrac/energy/cap_beam_gun.mdl") 
                  holoAng(22,entity():toWorld(ang(0,0,0))) 
                  holoParent(22,11)
                  BeamGun:setSubMaterial(2,"spacebuild/body2")
                  BeamGun:setSubMaterial(4,"sprops/trans/misc/ls_m1")
                  BeamGun:setSubMaterial(3,"spacebuild/fusion2")
    # End Holograms
}
# End configuration

# Autoclean weapons
elseif (last() & AutoClean == 1){
    # Remove the guns if the turret is deleted   
    foreach(K, V:wirelink=Weapons){
        V:entity():propDelete()
    }
}
# End autoclean
      
# Turret aiming and firing
elseif (Active){
    # Black magic that makes the turret aim below here
    local TargetLoc = Target:isValid() ? Target:boxCenterW() : (holoEntity(11):pos() + (entity():right() * 10000))
    
    OTElevation = TElevation
    TBearing = -holoEntity(1):bearing(TargetLoc)
    TElevation = holoEntity(111):elevation(TargetLoc)
    
    if (TElevation<MinElevation){TElevation=MinElevation} elseif (TElevation>MaxElevation) {TElevation=MaxElevation}
    
    OTElevation = OTElevation - TElevation
    
    if (OTElevation<-AimSpeed){TElevation+=OTElevation+AimSpeed} elseif (OTElevation>AimSpeed) {TElevation+=OTElevation-AimSpeed}
    if (TBearing<-AimSpeed){TBearing=-AimSpeed} elseif (TBearing>AimSpeed) {TBearing=AimSpeed}
    
    holoAng(1,holoEntity(1):toWorld(ang(0,TBearing,0)))
    holoAng(11, holoEntity(1):toWorld(ang(-TElevation, 0, 0)))
    # End black magic
    
    # Check if the target is owned by the owner of the chip, or is on the owners prop protection before firing
    if(~Fire||Fire){
        foreach(K, V:wirelink=Weapons){
            E = V:entity()
            rangerFilter(E)
            Hitscan = rangerOffset(Range, E:boxCenterW(), E:forward())
            if (!Hitscan:entity():isValid() || Hitscan:entity() == owner() || Hitscan:entity():owner() == owner())
            {
                V["Fire", number] = 0
            }
            else
            {
                V["Fire", number] = Fire
            }
        }
    }
}elseif(~Active && !Active){
    # Stop firing if we're not active anymore
    foreach(K, V:wirelink=Weapons){
        V["Fire", number] = 0
    }
}
# End turret aiming and firing
